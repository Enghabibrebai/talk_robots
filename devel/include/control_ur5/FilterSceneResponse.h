// Generated by gencpp from file control_ur5/FilterSceneResponse.msg
// DO NOT EDIT!


#ifndef CONTROL_UR5_MESSAGE_FILTERSCENERESPONSE_H
#define CONTROL_UR5_MESSAGE_FILTERSCENERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Empty.h>

namespace control_ur5
{
template <class ContainerAllocator>
struct FilterSceneResponse_
{
  typedef FilterSceneResponse_<ContainerAllocator> Type;

  FilterSceneResponse_()
    : finished()  {
    }
  FilterSceneResponse_(const ContainerAllocator& _alloc)
    : finished(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Empty_<ContainerAllocator>  _finished_type;
  _finished_type finished;





  typedef boost::shared_ptr< ::control_ur5::FilterSceneResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_ur5::FilterSceneResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FilterSceneResponse_

typedef ::control_ur5::FilterSceneResponse_<std::allocator<void> > FilterSceneResponse;

typedef boost::shared_ptr< ::control_ur5::FilterSceneResponse > FilterSceneResponsePtr;
typedef boost::shared_ptr< ::control_ur5::FilterSceneResponse const> FilterSceneResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_ur5::FilterSceneResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_ur5::FilterSceneResponse_<ContainerAllocator1> & lhs, const ::control_ur5::FilterSceneResponse_<ContainerAllocator2> & rhs)
{
  return lhs.finished == rhs.finished;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_ur5::FilterSceneResponse_<ContainerAllocator1> & lhs, const ::control_ur5::FilterSceneResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_ur5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_ur5::FilterSceneResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_ur5::FilterSceneResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_ur5::FilterSceneResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18521540d6a8ef1c5bbd2580b55486c5";
  }

  static const char* value(const ::control_ur5::FilterSceneResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18521540d6a8ef1cULL;
  static const uint64_t static_value2 = 0x5bbd2580b55486c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_ur5/FilterSceneResponse";
  }

  static const char* value(const ::control_ur5::FilterSceneResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Empty finished\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Empty\n"
;
  }

  static const char* value(const ::control_ur5::FilterSceneResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finished);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterSceneResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_ur5::FilterSceneResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_ur5::FilterSceneResponse_<ContainerAllocator>& v)
  {
    s << indent << "finished: ";
    s << std::endl;
    Printer< ::std_msgs::Empty_<ContainerAllocator> >::stream(s, indent + "  ", v.finished);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_UR5_MESSAGE_FILTERSCENERESPONSE_H
