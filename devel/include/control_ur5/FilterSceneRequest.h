// Generated by gencpp from file control_ur5/FilterSceneRequest.msg
// DO NOT EDIT!


#ifndef CONTROL_UR5_MESSAGE_FILTERSCENEREQUEST_H
#define CONTROL_UR5_MESSAGE_FILTERSCENEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace control_ur5
{
template <class ContainerAllocator>
struct FilterSceneRequest_
{
  typedef FilterSceneRequest_<ContainerAllocator> Type;

  FilterSceneRequest_()
    : pointcloud_topic()
    , image_topic()  {
    }
  FilterSceneRequest_(const ContainerAllocator& _alloc)
    : pointcloud_topic(_alloc)
    , image_topic(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _pointcloud_topic_type;
  _pointcloud_topic_type pointcloud_topic;

   typedef  ::std_msgs::String_<ContainerAllocator>  _image_topic_type;
  _image_topic_type image_topic;





  typedef boost::shared_ptr< ::control_ur5::FilterSceneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_ur5::FilterSceneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FilterSceneRequest_

typedef ::control_ur5::FilterSceneRequest_<std::allocator<void> > FilterSceneRequest;

typedef boost::shared_ptr< ::control_ur5::FilterSceneRequest > FilterSceneRequestPtr;
typedef boost::shared_ptr< ::control_ur5::FilterSceneRequest const> FilterSceneRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_ur5::FilterSceneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_ur5::FilterSceneRequest_<ContainerAllocator1> & lhs, const ::control_ur5::FilterSceneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pointcloud_topic == rhs.pointcloud_topic &&
    lhs.image_topic == rhs.image_topic;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_ur5::FilterSceneRequest_<ContainerAllocator1> & lhs, const ::control_ur5::FilterSceneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_ur5

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_ur5::FilterSceneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_ur5::FilterSceneRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_ur5::FilterSceneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69e46d0658fdec66c7fd92ae3c8381f0";
  }

  static const char* value(const ::control_ur5::FilterSceneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69e46d0658fdec66ULL;
  static const uint64_t static_value2 = 0xc7fd92ae3c8381f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_ur5/FilterSceneRequest";
  }

  static const char* value(const ::control_ur5::FilterSceneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String pointcloud_topic\n"
"std_msgs/String image_topic\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::control_ur5::FilterSceneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pointcloud_topic);
      stream.next(m.image_topic);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FilterSceneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_ur5::FilterSceneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_ur5::FilterSceneRequest_<ContainerAllocator>& v)
  {
    s << indent << "pointcloud_topic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.pointcloud_topic);
    s << indent << "image_topic: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.image_topic);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_UR5_MESSAGE_FILTERSCENEREQUEST_H
